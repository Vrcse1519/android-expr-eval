<resources>
    <!-- Misc used in AndroidManifest.xml -->
    <string name="app_name">ExprEval</string>
    <string name="actionEvalExpr">Eval expression</string> <!-- label for PROCESS_TEXT intent -->

    <!-- ExprEval activity -->
    <string name="exprInputHint" >Type expression or command</string>
    <string name="evalBtn">Evaluate</string>
    <string name="clearContextPrompt">Do you want to delete all non-readonly functions and variables?</string>
    <string name="contextCleared">All non-readonly variables and functions have been deleted.</string>
    <string name="helpMessage">
        In the input box you can type expressions, variable or function assignments (like &quot;a=5&quot; or &quot;log(x,b)=log(x)/log(b)&quot;) and commands.
        The available commands are &quot;help&quot;, &quot;context&quot;, &quot;clear&quot; and &quot;exit&quot;. Type &quot;help&quot; in the input box for more detailed instructions. In the output box, results are shown in &lt;font color=&quot;green&quot;&gt;green&lt;/font&gt; and errors in &lt;font color=&quot;red&quot;&gt;red&lt;/font&gt;.
        Evaluation steps are shown in default color, and the input is echoed in &lt;font color=&quot;yellow&quot;&gt;yellow&lt;/font&gt; (both can be disabled from the menu).
    </string>

    <!-- Menu -->
    <string name="context">Context</string>
    <string name="clearContext">Clear context</string>
    <string name="clearOutput">Clear output</string>
    <string name="showSteps">Show steps</string>
    <string name="echoInput">Echo input</string>
    <string name="help">Help</string>

    <!-- ContextDialogFragment-->
    <string name="newContextItem">New&#8230;</string>
    <string-array name="addVariableFunction">
        <item>Add variable</item>
        <item>Add function</item>
    </string-array>
    <string name="contextItemDeletePrompt">Do you want to delete "%s" ?</string>
    <string name="contextItemDeleted">"%s" has been deleted.</string>

    <!-- both EditFunctionDialogFragment and EditVariableDialogFragment -->
    <string name="name">Name</string>
    <string name="readonlyCheckbox">Read-only (if checked, you won\'t be able to edit or delete this until the application is restarted.)</string>

    <!-- EditVariableDialogFragment -->
    <string name="value">Value</string>
    <string name="varNewValue">%1$s is now %2$s.</string>

    <!-- EditFunctionDialogFragment -->
    <string name="expression">Expression</string>
    <string name="arguments">Arguments (tap to remove)</string>
    <string name="argumentHint">Type argument name</string>
    <string name="addArgument">Add argument</string>
    <string name="invalidArgName">Invalid argument name</string>
    <string name="functionNewDef">%1$s is now defined as %2$s.</string>

    <!-- ExprEvalDialog activity -->
    <string name="expressionColon">Expression: </string>
    <string name="evalLog">Evaluation log: </string>
    <string name="result">Result: </string>
    <string name="okToReplace">Tap OK to replace the expression with the result.</string>
    <string name="close">Close</string>
    <string name="evalFailed"> evaluation failed.</string>

    <!-- Various messages used by the java-expr-eval library (https://github.com/gianluca-nitti/java-expr-eval) -->
    <string name="emptyExpr">An empty expression was found.</string>
    <string name="emptySymName">The empty string isn\'t a valid symbol identifier.</string>
    <string name="errorPrefix">Expression error: %s</string>
    <string name="evalStep">%1$s evaluates to %2$s</string>
    <string name="exprEndReached">A sub-expression was expected, but the end of the expression was reached.</string>
    <string name="failedStoreResult">Warning: failed to store result. Reason: %s</string>
    <string name="incorrectDelete">Incorrect syntax. To delete a function, the number of arguments must be specified (e.g. "fun(2)=" to delete "fun(x, y)").</string>
    <string name="interactiveHelp">
        Accepted statements are expressions, assignments and commands.
        An expression can be formed by integer or decimal numbers, the +,-,*,/,^ binary operators, variables, functions and parenthesis.
        A variable is a string of one or more letters and/or underscores. Variables can\'t be named as commands, which are reserved words.
        When an expression is successfully evaluated, it\'s result is displayed and automatically assigned to the "ans" variable, so it can be accessed from the next statement.
        A variable assignment is formed by a variable name followed by the = symbol and an expression, which is evaluated and bound to that variable.
        An empty assignment (in the form "someVariable=") deletes the variable.
        A function assignment is formed by a function name and its parameters, followed by the = symbol and an expression, which is bound to that function, e.g."sum(x,y)=x+y".
        A function can be deleted with an empty assignment; the number of arguments must be specified, e.g. "sum(2)=" to delete the function "sum" defined on two arguments.
        An assignment (of variable or function) can be prepended with the "readonly" word to prevent it to be modified or deleted, e.g. "readonly x=1", "readonly square(a)=a^2".
        The commands are: context (prints all the defined variables and functions), clear (deletes all the non-readonly variables and functions), help (shows this message) and exit (stops reading input).
    </string>
    <string name="invalidOperator">Unknown operator \'%s\'.</string>
    <string name="invalidSymName">"%1$s" isn\'t a valid symbol name because it contains the \'%2$s\' character.</string>
    <string name="onlyOneEquality">Only one = operator per command is allowed.</string>
    <string name="operatorExpected">An operator was expected, but an expression was found.</string>
    <string name="operatorFound">A sub-expression was expected, but an operator was found.</string>
    <string name="parenthesisMismatch">The numbers of opened and closed parenthesis don\'t match.</string>
    <string name="readonlyFunc">The "%1$s" function is defined as read-only for %1$s arguments.</string>
    <string name="readonlyVar">The "%s" variable is defined as read-only.</string>
    <string name="reservedWord">%s is a reserved word and can\'t be used as symbol name.</string>
    <string name="rewriteStep">%1$s can be rewritten as %2$s</string>
    <string name="undefinedFunc">The function "%1$s" is not defined for %2$s arguments.</string>
    <string name="undefinedVar">The variable "%s" is not defined.</string>
    <string name="unknownChar">Unrecognized character %s.</string>
</resources>